[{"back":"Must begin with a letter, _ or $.  Subsequent characters may also be numerals.  ","front":"What are the legal identifiers in JavaScript?","list":"Syntax"},{"back":"numbers, strings, and booleans","front":"In JavaScript, what are the primitive types?","list":"Types"},{"back":"object.  They are objects.  ","front":"In JavaScript, functions are of the type: _______","list":"Types"},{"back":"64-bit floating point numbers","front":"JavaScript represents all numbers as ______","list":"Types"},{"back":"It must start with \"0x\".  For example: \"0xCAFE911\"","front":"In JavaScript, what is the syntax for writing a hexadecimal literal?","list":"Types"},{"back":"A pseudo-random number between 0 and 1, including 0 but excluding 1.","front":"What does Math.random() return?","list":"Math"},{"back":"Use the Math.random() method, which returns x, where 0<=x<1.","front":"How can you get a pseudo-random number in JavaScript?","list":"Math"},{"back":"Infinity.  Note that JavaScript does not interpret this as an error.","front":"In JavaScript, what does `10\/0` return?","list":"Math"},{"back":"Yes.  If x is `NaN` (not-a-number)","front":"Is there any possible x in Javascript such that `x!=x` evaluates true?","list":"Math"},{"back":"","front":"","list":"Math"},{"back":"The problem is that numbers are represented in binary, and there is no way to represent 1\/10 exactly in this scheme.  Therefore, `x==y` evaluates false because of a rounding error.","front":"In JavaScript, observe that if we run `x = .3-.2` and `y=.2-.1` then `x==y` evaluates false.  Why?  What's going on here?","list":"Math"}]
